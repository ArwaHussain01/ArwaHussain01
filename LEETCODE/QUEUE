class MyCircularQueue {
public:
    vector<int>v;
    int front,rear,size,cap;
    MyCircularQueue(int k) {
       for(int i=0;i<k;i++)
       {
       v.push_back(-1);
       }
       front=0;
       rear=-1;
       cap=0;
       size=k;
    }
    
    bool enQueue(int value) {
        if(!isFull())
        {
            rear++;
            rear=rear%size;
            v[rear]=value;
            cap++;
            return true;

        }
        else
        {
        return false;
        }
    }
    
    bool deQueue() {
        if(!isEmpty())
        {
            
            v[front]=-1;
            front++;
            front=front%size;
            cap--;
            return true;
 
            
        }
        else
        {
return false;
         }
        
    }
    
    int Front() {
        return v[front];
    }
    
    int Rear() {
        if(isEmpty()) return -1;
    else
         return v[rear];
    }
    
    bool isEmpty() {
        
    if(cap==0) return true;
    else
        return false;
    }
    bool isFull() {
        if(cap==size) return true;
    else
        return false;
    }
};

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue* obj = new MyCircularQueue(k);
 * bool param_1 = obj->enQueue(value);
 * bool param_2 = obj->deQueue();
 * int param_3 = obj->Front();
 * int param_4 = obj->Rear();
 * bool param_5 = obj->isEmpty();
 * bool param_6 = obj->isFull();
 */
