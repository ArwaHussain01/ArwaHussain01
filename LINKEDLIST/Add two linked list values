performing the addition of two linked lists. But I will tell you the best approach to do this problem.

Letâ€™s take an example to understand the question clearly then we will move ahead.

Number 1 =   4 -> 5

Number 2 =   1 -> 4 -> 5

Answer should be : 1 -> 9 -> 0

Now, we will understand the code

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
using namespace std;
struct Node* addlists(struct Node* first, struct Node* second);
struct Node {
    int data;
    struct Node* next;
    Node(int x)
    {
        data = x;
        next = NULL;
    }
};

struct Node* makelist(int size)
{
    int value;
    cin>> value;
    
    Node* head = new Node(value);
    Node* tail = head;
    
    for(int i=0; i<size-1; i++)
    {
        cin>> value;
        tail->next = new Node(value);
        tail = tail->next;
    }
    
    return head;
}

void printlist(Node* n)
{
    while(n)
    {
        cout<< n->data << " ";
        n = n->next;
    }
    cout<< endl;
}

int main()
{
        int n, m;
        
        cin>>n;        // size of first linked list
        Node* first = makelist(n);                  // suppose input is 4 -> 5
        
        cin>>m;       // size of second linked list
        Node* second = makelist(m);                 // suppose input is 1 -> 4 -> 5
        
        Node* resultant = addlists(first,second);
        printlist(resultant);
    
    return 0;
}


struct Node* addlists(struct Node* first, struct Node* second)
{
    
    int carry = 0, sum = 0;

Node* start = new Node(0);
Node* end = start;

while(first  || second  || carry)
{
int a = (first != NULL)?first -> data:0;
int b = (second != NULL)?second -> data:0;

carry = carry + (a + b);
end -> next = new Node(carry%10);
end=end->next;
carry=carry/10;

if(first != NULL)
first = first -> next;

if(second != NULL)
second = second -> next;

}
return start->next;
}


