
wt = {1,2,4,5};
val = {5,4,8,6};
W=5;
The Maximum value of items, thief can steal is 13


#include <bits/stdc++.h>

using namespace std;

int knapsack(vector<int>& wt, vector<int>& val, int n, int W){
    
    vector<vector<int>> dp(n,vector<int>(W+1,0));
    
    //Base Condition
    
    for(int i=wt[0]; i<=W; i++){
        dp[0][i] = val[0];
       
        
    }
   
    
    for(int ind =1; ind<n; ind++){
        for(int cap=0; cap<=W; cap++){
            
            int notTaken = 0 + dp[ind-1][cap];
            
            int taken = INT_MIN;
            
            if(wt[ind] <= cap)
                taken = val[ind] + dp[ind-1][cap - wt[ind]];
                
            dp[ind][cap] = max(notTaken, taken);
            
        }
        
    }
    
    return dp[n-1][W];
}

int main() {

  vector<int> wt = {1,2,4,5};
  vector<int> val = {5,4,8,6};
  int W=5;
  
  int n = wt.size();
                                 
  cout<<"The Maximum value of items, thief can steal is " <<knapsack(wt,val,n,W);
}

 Another way is by using one row itself to solve this problem that is is previous row because we know when computing we go ind-1 and try to find that particular va;ue for the same capacity 
 same for picking that itme so we make changes from right to left 
 
 #include <bits/stdc++.h> 
int knapsack(vector<int> wt, vector<int> val, int n, int maxWeight) 
{
   vector<int> prev(maxWeight+1,0);
    for(int i=wt[0];i<=maxWeight;i++)
    {
    prev[i]=val[0];
    }
    for(int ind=1;ind<n;ind++)
    {
     for(int cap=maxWeight;cap>=0;cap--)
     {
      int notpick=0+prev[cap];
      int pick=INT_MIN;
      if(wt[ind]<=cap)
      {
      pick=val[ind]+prev[cap-wt[ind]];
      }
      prev[cap]=max(pick,notpick);
     }
    }
 return prev[maxWeight];
}
