class Solution
{
private:

public:

    void TrackParents(Node* root,unordered_map<Node*,Node*> &parents,Node* &tar,int target)
    {
        queue<Node*>q;
        q.push(root);
        while(!q.empty())
        {
            Node *curr=q.front();
            q.pop();
            if(curr->left->data==target)
            {
                tar=curr->left;
            }
            if(curr->right->data==target)
            {
                tar=curr->right;
            }
            
            if(curr->left)
            {
                
                parents[curr->left]=curr;
                q.push(curr->left);
            }
            if(curr->right)
            {

                parents[curr->right]=curr;
                q.push(curr->right);
            }
            
        }
    }
    vector <int> KDistanceNodes(Node* root, int target , int k)
    {
        unordered_map<Node*,Node*> parents;
        unordered_map<Node*,bool> visited;
        Node* tar=NULL;
        queue<Node*>q;
        q.push(root);
        while(!q.empty())
        {
            Node *curr=q.front();
            q.pop();
            if(curr->data==target)
            {
                tar=curr;
            }
            
            if(curr->left)
            {
                
                parents[curr->left]=curr;
                q.push(curr->left);
            }
            if(curr->right)
            {

                parents[curr->right]=curr;
                q.push(curr->right);
            }
            
        }
        // clearing queue

            while(!q.empty()) q.pop();
       
        q.push(tar);
        visited[tar]=true;
        int distance=0;
        while(!q.empty())
        {
            int size=q.size();
            if(distance++==k) break;
            for(int i=0;i<size;i++)
            {
                Node* curr=q.front();
                q.pop();
                if(curr->left && visited[curr->left]!=true)
                {
                    visited[curr->left]=true;
                    q.push(curr->left);
                }
                if(curr->right && visited[curr->right]!=true)
                {
                    visited[curr->right]=true;
                    q.push(curr->right);
                }
                if(parents[curr] && visited[parents[curr]]!=true)
                {
                    visited[parents[curr]]=true;
                    q.push(parents[curr]);
                }
            }
            
        }
        vector<int> v;
        while(!q.empty())
        {
            int x=q.front()->data;
            q.pop();
            v.push_back(x);
        }
        sort(v.begin(),v.end());
        return v;
    }
};Nodes at given distance in binary tree
