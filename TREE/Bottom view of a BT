Given a binary tree, print the bottom view from left to right.
A node is included in bottom view if it can be seen when we look at the tree from bottom.

                      20
                    /    \
                  8       22
                /   \        \
              5      3       25
                    /   \      
                  10    14

For the above tree, the bottom view is 5 10 3 14 25.
If there are multiple bottom-most nodes for a horizontal distance from root,
then print the later one in level traversal. For example, in the below diagram, 3 and 4 are both the bottommost nodes at horizontal distance 0, we need to print 4.

 20
                    /    \
                  8       22
                /   \     /   \
              5      3 4     25
                     /    \      
                 10       14

For the above tree the output should be 5 10 4 14 25.
 
 class Solution {
  public:
    vector <int> bottomView(Node *root) {
       vector<int>ans;
       
       queue<pair<Node*,int>> q;
       map<int,int>m;
       
       q.push({root,0});
       while(!q.empty())
       {
           auto it=q.front();
           q.pop();
           
           Node* node=it.first;
           int line=it.second;
           
           m[line]=node->data;
           
           if(node->left) q.push({node->left,line-1});
           
           if(node->right) q.push({node->right,line+1});
       }
       for(auto it:m)
       {
           ans.push_back(it.second);
       }
       return ans;
       
    }
