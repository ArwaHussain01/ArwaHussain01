class Solution {
public:

    bool is_leaf(Node *root)
    {
        if(root->left==NULL && root->right == NULL) return true;
        return false;
    }
    void LeftB(Node *root,vector <int> &res)
    {
        Node*curr=root->left;
        while(curr)
        {
        if(!is_leaf(curr)){
            res.push_back(curr->data);
        }
        if(curr->left) curr=curr->left;
        else curr=curr->right;
        }
    }
    void leaf_boundary(Node * root, vector<int> &res) {
    if(is_leaf(root)) {
        res.push_back(root->data);
        return;
    }
    if(root->left) leaf_boundary(root->left, res);
    if(root->right) leaf_boundary(root->right, res);
}
    void RightB(Node *root,vector <int> &res)
    {
        Node*curr=root->right;
        stack<int>st;
        while(curr)
        {
        if(!is_leaf(curr)){
            st.push(curr->data);
        }
        if(curr->right) curr=curr->right;
        else curr=curr->left;
        }
        while(!st.empty())
        {
            res.push_back(st.top());
            st.pop();
        }
    }
    
    
    vector <int> boundary(Node *root)
    {
        vector<int> res;
        if(root==NULL) return res;
        res.push_back(root->data);
        LeftB(root,res);
        if(!is_leaf(root)) leaf_boundary(root, res);
        RightB(root,res);
        return res;
    }
};
