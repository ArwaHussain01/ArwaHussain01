Problem Statement
There are N stones, numbered 1,2,…,N. For each i (1≤i≤N), the height of Stone i is h 

There is a frog who is initially on Stone 1. He will repeat the following action some number of times to reach Stone N:

If the frog is currently on Stone i, jump to one of the following: Stone i+1,i+2,…,i+K. Here, a cost of ∣h∣ is incurred, where j is the stone to land on.
Find the minimum possible total cost incurred before the frog reaches Stone N.

Constraints
All values in input are integers.
2≤N≤10 
5
 
1≤K≤100
1≤h 
i≤10 

4
Input
Input is given from Standard Input in the following format:

N K
h 
1
h 
2
… h 
N

 
Output
Print the minimum possible total cost incurred.

Sample Input 1 
Copy
5 3
10 30 40 50 20
Sample Output 1 
Copy
30
If we follow the path 1 → 2 → 5, the total cost incurred would be ∣10−30∣+∣30−20∣=30.



CODE

#include<bits/stdc++.h>
using namespace std;
int frogjump2(vector<int> &heights,int k,int n)
{
  vector<int>dp(n,0);
  dp[0]=0;
  for(int i=1;i<n;i++)
  {
    int minsteps=INT_MAX;
    for(int j=1;j<=k&&i>=j;j++)
    {
      
      if(i-j>=0)
      {
       int jump=dp[i-j]+abs(heights[i]-heights[i-j]);
        minsteps=min(minsteps,jump);
      }
      
    }
    dp[i]=minsteps;
    
  }
  return dp[n-1]; 
}
int main()
{
  vector<int>heights;
  int n;
  cin>>n;
  int k;
  cin>>k;
  int a;
  for(int i=0;i<n;i++)
  {
    cin>>a;
    heights.push_back(a);
  }
  int c=frogjump2(heights,k,n);
  cout<<c;
}
