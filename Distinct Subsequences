We are given two strings S1 and S2, we want to know how many distinct subsequences of S2 are present in S1.

Example:


Disclaimer: Donâ€™t jump directly to the solution, try it out yourself first.

Note: Please modulo the answer if asked.

Solution :
We have to find distinct subsequences of S2 in S1. As there is no uniformity in data, there is no other way to find out than to try out all possible ways. To do so we will need to use recursion.

1 D optimization 

#include <bits/stdc++.h> 
int prime = 1e9+7;


int subsequenceCounting(string &s1, string &s2, int n, int m) {
    // Write your code here.
    
    vector<int>prev(m+1,0);
    
    prev[0]=1;
    for(int i=1;i<n+1;i++){
        for(int j=m;j>=1;j--){
            
            if(s1[i-1]==s2[j-1])
               prev[j] = (prev[j]+prev[j-1])%prime;
            
        }
    }
    
    
    return prev[m];
} 


#include <bits/stdc++.h>

using namespace std;

int prime = 1e9+7;


int subsequenceCounting(string &s1, string &s2, int n, int m) {
    // Write your code here.
    
    vector<vector<int>> dp(n+1,vector<int>(m+1,0));
    
    for(int i=0;i<n+1;i++){
        dp[i][0]=1;
    }
    for(int i=1;i<m+1;i++){
        dp[0][i]=0;
    }
    
    for(int i=1;i<n+1;i++){
        for(int j=1;j<m+1;j++){
            
            if(s1[i-1]==s2[j-1])
                dp[i][j] = (dp[i-1][j-1] + dp[i-1][j])%prime;
            else
                dp[i][j] = dp[i-1][j];
        }
    }
    
    
    return dp[n][m];
} 


int main() {

  string s1 = "babgbag";
  string s2 = "bag";

  cout << "The Count of Distinct Subsequences is "<<
  subsequenceCounting(s1,s2,s1.size(),s2.size());
}
